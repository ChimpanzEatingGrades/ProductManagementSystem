
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.JTable;



/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author davidesfandiary
 */
public class pOrders extends javax.swing.JFrame {

    /**
     * Creates new form editSuppliers
     */
    private loggedIn parentPage;
    private static final String dburl = "jdbc:mysql://localhost:3306/finals";
    private static final String dbusername = "root";
    private static final String dbpassword = "rootroot";
    private String purchase_order_id = "";

    
    public pOrders() {
        initComponents();
        //loadCB();
    }
    
    public pOrders(loggedIn parentPage, String purchase_order_id) {
        initComponents();
        parentPage.loadItemsCB(this.pOrdersItemsCB);
     
        this.parentPage = parentPage;
        this.purchase_order_id = purchase_order_id;
    
    }
    
 

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        suppliersDeleteBTN = new javax.swing.JButton();
        pOrdersAddItemBTN = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        pOrdersItemsCB = new javax.swing.JComboBox<>();
        jLabel14 = new javax.swing.JLabel();
        pOrdersQuantityTF = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel2.setText("Add Items to Order");

        suppliersDeleteBTN.setText("Close Order");
        suppliersDeleteBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                suppliersDeleteBTNActionPerformed(evt);
            }
        });

        pOrdersAddItemBTN.setText("Add to Order");
        pOrdersAddItemBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pOrdersAddItemBTNActionPerformed(evt);
            }
        });

        jLabel12.setText("Item:");

        jLabel14.setText("Quantity:");

        jLabel1.setForeground(new java.awt.Color(153, 153, 153));
        jLabel1.setText("Done?");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(138, 138, 138)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel12)
                            .addComponent(jLabel14))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pOrdersQuantityTF, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(pOrdersItemsCB, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel1)
                                .addComponent(pOrdersAddItemBTN))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(158, 158, 158)
                        .addComponent(suppliersDeleteBTN)))
                .addContainerGap(141, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(110, 110, 110)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(pOrdersItemsCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(pOrdersQuantityTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pOrdersAddItemBTN)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 75, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(suppliersDeleteBTN)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void suppliersDeleteBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_suppliersDeleteBTNActionPerformed
       this.setVisible(false);
    }//GEN-LAST:event_suppliersDeleteBTNActionPerformed

    private void pOrdersAddItemBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pOrdersAddItemBTNActionPerformed
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection con = DriverManager.getConnection(dburl, dbusername, dbpassword);
            
            
            String item_id = "";
            String quantity = pOrdersQuantityTF.getText();
            String unit_price = "";
            
            //---------- Get Item ID
 
            
            String query = "SELECT * FROM Items WHERE item_name = ?";

            PreparedStatement preparedStatement = con.prepareStatement(query);
            preparedStatement.setString(1, pOrdersItemsCB.getSelectedItem().toString());

            ResultSet sqlresult;

            sqlresult = preparedStatement.executeQuery();

            if (sqlresult.next()) {
                item_id = sqlresult.getString("item_id");
                unit_price = sqlresult.getString("unit_price");
            } else {
                System.out.println("Item not found in database.");
                return; // Avoid inserting without valid item_id
            }
            
            //---------- CREATE TRANSACTION
           
      
            query = "INSERT INTO Transactions (item_id, quantity, transaction_type, notes,"
                    + "transaction_date) VALUES (?, ?, ?, ?, now())";
           
            preparedStatement = con.prepareStatement(query);
            preparedStatement.setString(1, item_id);
            preparedStatement.setString(2, quantity);
            preparedStatement.setString(3, "Stock in");
            preparedStatement.setString(4, "");
        
            preparedStatement.executeUpdate();
            
            parentPage.executeTransaction(quantity, "Purchase", item_id, false);
            
            
            //---------- CREATE PurchaseOrderItems Row
            
            query = "INSERT INTO PurchaseOrderItems (purchase_order_id, item_id, quantity, unit_price)"
                    + "VALUES (?, ?, ?, ?)";
           
            preparedStatement = con.prepareStatement(query);
            preparedStatement.setString(1, purchase_order_id);
            preparedStatement.setString(2, item_id);
            preparedStatement.setString(3, quantity);
            preparedStatement.setString(4, unit_price);
            preparedStatement.executeUpdate();
           
            
            //----------- UPDATE PruchaseOrder total Amount
            
            Double itemCost = Double.parseDouble(unit_price) * Double.parseDouble(quantity);
            Double oldOrderTotal = 0.0;
            
                //-------- Get original total
                
            query = "SELECT * FROM PurchaseOrders WHERE purchase_order_id = ?";

            preparedStatement = con.prepareStatement(query);
            preparedStatement.setString(1, purchase_order_id);

            sqlresult = preparedStatement.executeQuery();
            
            if (sqlresult.next()) {
                oldOrderTotal = sqlresult.getDouble("total_amount");
            } 
            else {
                System.out.println("Item not found in database.");
                
            }
                
                //----------- Update order total
      
            query = "UPDATE PurchaseOrders SET total_amount = ?"
                    + "WHERE purchase_order_id = ?";
            preparedStatement = con.prepareStatement(query);
            preparedStatement.setString(1, (itemCost + oldOrderTotal) + "");
            preparedStatement.setString(2, purchase_order_id);
            preparedStatement.executeUpdate();
            
            pOrdersQuantityTF.setText("");
            parentPage.loadTable();
            preparedStatement.close();
            con.close();
            
        } catch(Exception e) {
            System.err.println("Error: " + e.getMessage());
        }
    }//GEN-LAST:event_pOrdersAddItemBTNActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(editSuppliers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(editSuppliers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(editSuppliers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(editSuppliers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new editSuppliers().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JButton pOrdersAddItemBTN;
    private javax.swing.JComboBox<String> pOrdersItemsCB;
    private javax.swing.JTextField pOrdersQuantityTF;
    private javax.swing.JButton suppliersDeleteBTN;
    // End of variables declaration//GEN-END:variables
}
