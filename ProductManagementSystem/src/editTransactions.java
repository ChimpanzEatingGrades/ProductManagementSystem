
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.JTable;



/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author davidesfandiary
 */
public class editTransactions extends javax.swing.JFrame {

    /**
     * Creates new form editSuppliers
     */
    private loggedIn parentPage;
    private static final String dburl = "jdbc:mysql://localhost:3306/finals";
    private static final String dbusername = "root";
    private static final String dbpassword = "rootroot";
    private String rowItem = "";
    private String rowQuantity = "";
    private String rowType = "";
    private String rowTime = "";
    private String rowNotes = "";
    
    public editTransactions() {
        initComponents();
        //loadCB();
    }
    
    public editTransactions(loggedIn parentPage) {
        initComponents();
        //loadCB();
        parentPage.loadItemsCB(this.transactionsItemCB);
        //loadTransactionsCB();
        transactionsCB.setVisible(false);
        this.parentPage = parentPage;
        
        fillData();
    }
    
    private void fillData(){
        JTable table = parentPage.getTransactionsTable();
        int row = table.getSelectedRow();

        this.rowItem = table.getValueAt(row, 0).toString();
        this.rowTime = table.getValueAt(row, 1).toString();
        this.rowQuantity = table.getValueAt(row, 2).toString();
        this.rowType = table.getValueAt(row, 3).toString();
        this.rowNotes = table.getValueAt(row, 4).toString();

        transactionsItemCB.getModel().setSelectedItem(this.rowItem);
        transactionsQuantityTF.setText(this.rowQuantity);
        transactionsTimeTF.setText(this.rowTime);
        transactionsTypeCB.getModel().setSelectedItem(this.rowType);
        transactionsNotesTF.setText(this.rowNotes);
            
    }
    
    public final void updateItems(){}
    
    public final void loadTransactionsCB() {

        try {
        
            
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection con = DriverManager.getConnection(dburl, dbusername, dbpassword);

            Statement statement;
            statement = con.createStatement();
            ResultSet sqlresult;
            sqlresult = statement.executeQuery("SELECT * FROM Transactions");
            
            transactionsCB.removeAllItems();

            while(sqlresult.next()) {
                transactionsCB.addItem(sqlresult.getString("transaction_id"));
            }
            
        }    
            catch (Exception e) {
            System.out.println("Load Transactions CB Error: " + e.getMessage());
        }
    
    }
    
    public final void loadItemsCB() {

        try {
        
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection con = DriverManager.getConnection(dburl, dbusername, dbpassword);

            Statement statement;
            statement = con.createStatement();
            ResultSet sqlresult;
            sqlresult = statement.executeQuery("SELECT * FROM ITEMS");
            
            transactionsItemCB.removeAllItems();

            while(sqlresult.next()) {
                sqlresult.getString("item_name");
            }
            
        }    
            catch (Exception e) {
            System.out.println("Load Items CB Error: " + e.getMessage());
        }
    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        transactionsCB = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        suppliersDeleteBTN = new javax.swing.JButton();
        suppliersUpdateBTN = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        transactionsItemCB = new javax.swing.JComboBox<>();
        jLabel14 = new javax.swing.JLabel();
        transactionsQuantityTF = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        transactionsNotesTF = new javax.swing.JTextArea();
        jLabel17 = new javax.swing.JLabel();
        transactionsTimeTF = new javax.swing.JTextField();
        transactionsTypeCB = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        transactionsCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transactionsCBActionPerformed(evt);
            }
        });

        jLabel2.setText("Edit Transactions Table");

        suppliersDeleteBTN.setText("Delete");
        suppliersDeleteBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                suppliersDeleteBTNActionPerformed(evt);
            }
        });

        suppliersUpdateBTN.setText("Update");
        suppliersUpdateBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                suppliersUpdateBTNActionPerformed(evt);
            }
        });

        jLabel12.setText("Item:");

        jLabel14.setText("Quantity:");

        jLabel15.setText("Type:");

        jLabel16.setText("Notes:");

        transactionsNotesTF.setColumns(20);
        transactionsNotesTF.setRows(5);
        jScrollPane5.setViewportView(transactionsNotesTF);

        jLabel17.setText("Time:");

        transactionsTypeCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sale", "Purchase" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(suppliersDeleteBTN)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(suppliersUpdateBTN))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(79, 79, 79)
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(transactionsTypeCB, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(138, 138, 138)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(82, 82, 82)
                        .addComponent(jLabel12)
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(transactionsItemCB, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(transactionsCB, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(74, 74, 74)
                        .addComponent(jLabel16)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel14)
                            .addComponent(jLabel17))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(transactionsTimeTF, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(transactionsQuantityTF, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(69, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(40, 40, 40)
                .addComponent(transactionsCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(transactionsItemCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(transactionsTypeCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(transactionsQuantityTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(transactionsTimeTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(suppliersDeleteBTN)
                    .addComponent(suppliersUpdateBTN))
                .addGap(24, 24, 24))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void suppliersDeleteBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_suppliersDeleteBTNActionPerformed
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection con = DriverManager.getConnection(dburl, dbusername, dbpassword);
  
            System.out.println("Tes1");

            System.out.println("Tes2");
          
      
            String query = "SELECT * FROM Transactions INNER JOIN Items on Transactions.item_id = Items.item_id WHERE item_name = ? AND quantity = ? AND transaction_date = ?";
           
            PreparedStatement preparedStatement = con.prepareStatement(query);
            preparedStatement.setString(1, this.rowItem);
            preparedStatement.setString(2, this.rowQuantity);
            preparedStatement.setString(3, this.rowTime);
            
            ResultSet resultset; 
            resultset = preparedStatement.executeQuery();
            
            if(resultset.next()){
                parentPage.executeTransaction(this.rowQuantity, resultset.getString("transaction_type"), resultset.getString("item_id"), true); 
                System.out.println(this.rowQuantity + resultset.getString("transaction_type") + resultset.getString("item_id"));
            }
            else{
                System.out.println("nothing");
            }
            
            
            query = "DELETE Transactions FROM Transactions INNER JOIN Items on Transactions.item_id = Items.item_id WHERE item_name = ? AND quantity = ? AND transaction_date = ?";
           
            preparedStatement = con.prepareStatement(query);
            preparedStatement.setString(1, this.rowItem);
            preparedStatement.setString(2, this.rowQuantity);
            preparedStatement.setString(3, this.rowTime);
            preparedStatement.executeUpdate();
                        
            System.out.println("Tes4");
            //loadTransactionsCB();
            System.out.println("Tes5");
            parentPage.loadTable();
            this.setVisible(false);
            preparedStatement.close();
            con.close();
            
        } catch(Exception e) {
            System.err.println("Items Delete Error: " + e.getMessage());
        }
    }//GEN-LAST:event_suppliersDeleteBTNActionPerformed

    private void suppliersUpdateBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_suppliersUpdateBTNActionPerformed
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection con = DriverManager.getConnection(dburl, dbusername, dbpassword);
            
            
            
            String item_id = "";
            String quantity = transactionsQuantityTF.getText();
            String type = transactionsTypeCB.getSelectedItem().toString();
            String notes = transactionsNotesTF.getText();
            String time = transactionsTimeTF.getText();
            
            String query = "SELECT * FROM Items WHERE item_name = ?";

            PreparedStatement preparedStatement = con.prepareStatement(query);
            preparedStatement.setString(1, transactionsItemCB.getSelectedItem().toString());

            ResultSet sqlresult;

            sqlresult = preparedStatement.executeQuery();

            if (sqlresult.next()) {
                item_id = sqlresult.getString("item_id");
            } else {
                System.out.println("Item not found in database.");
                return; // Avoid inserting without valid item_id
            }
            
            parentPage.executeTransaction(this.rowQuantity, this.rowType, item_id, true);
           
      
            query = "UPDATE Transactions SET item_id = ?, quantity = ?, transaction_type = ?, notes = ?,"
                    + "transaction_date = ? WHERE transaction_date = ?";
           
            preparedStatement = con.prepareStatement(query);
            preparedStatement.setString(1, item_id);
            preparedStatement.setString(2, quantity);
            preparedStatement.setString(3, type);
            preparedStatement.setString(4, notes);
            preparedStatement.setString(5, time);
            preparedStatement.setString(6, this.rowTime);
            preparedStatement.executeUpdate();
            
            parentPage.executeTransaction(quantity, type, item_id, false);
            
            this.setVisible(false);
            
          

            parentPage.loadTable();
            
            preparedStatement.close();
            con.close();
            
        } catch(Exception e) {
            System.err.println("Error: " + e.getMessage());
        }
    }//GEN-LAST:event_suppliersUpdateBTNActionPerformed

    private void transactionsCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transactionsCBActionPerformed
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection con = DriverManager.getConnection(dburl, dbusername, dbpassword);
            
            //Statement statement = con.createStatement();
            
            System.out.println("Test");
            String id = transactionsCB.getSelectedItem().toString();
            System.out.println("Test");
            
            String query = "SELECT * FROM Transactions WHERE transaction_id = ?";
            
            PreparedStatement preparedStatement = con.prepareStatement(query);
            preparedStatement.setString(1, id);
            
            ResultSet sqlresult = preparedStatement.executeQuery();
            String itemID = "";
            
            while(sqlresult.next()) {
                transactionsQuantityTF.setText(sqlresult.getString("quantity"));
                itemID = sqlresult.getString("item_id");
                transactionsTypeCB.getModel().setSelectedItem(sqlresult.getString("transaction_type"));
                transactionsNotesTF.setText(sqlresult.getString("notes"));              
                transactionsTimeTF.setText(sqlresult.getString("transaction_date"));
            }
            
            query = "SELECT * FROM Items WHERE item_id = ?";
            
            preparedStatement = con.prepareStatement(query);
            preparedStatement.setString(1, itemID);
            
            sqlresult = preparedStatement.executeQuery();
            
            while(sqlresult.next()) {               
                transactionsItemCB.getModel().setSelectedItem(sqlresult.getString("item_name"));
            }
            
            preparedStatement.close();
            con.close();
            
        } catch (Exception e) {
            System.err.println("CB Action Performed Error: " + e.getMessage());
        }
    }//GEN-LAST:event_transactionsCBActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(editSuppliers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(editSuppliers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(editSuppliers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(editSuppliers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new editSuppliers().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JButton suppliersDeleteBTN;
    private javax.swing.JButton suppliersUpdateBTN;
    private javax.swing.JComboBox<String> transactionsCB;
    private javax.swing.JComboBox<String> transactionsItemCB;
    private javax.swing.JTextArea transactionsNotesTF;
    private javax.swing.JTextField transactionsQuantityTF;
    private javax.swing.JTextField transactionsTimeTF;
    private javax.swing.JComboBox<String> transactionsTypeCB;
    // End of variables declaration//GEN-END:variables
}
